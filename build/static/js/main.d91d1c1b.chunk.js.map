{"version":3,"sources":["api.const.js","components/Loader.jsx","components/tweetForm/NewTweetForm.jsx","components/tweetItem/TweetItem.jsx","components/TweetsList.jsx","components/NavBar.jsx","components/Profile.jsx","App.js","reportWebVitals.js","index.js"],"names":["apiConst","Loader","style","display","zIndex","height","width","justifyContent","alignItems","background","opacity","position","top","left","className","role","NewTweetForm","props","useState","usersTweet","setTweet","handleArr","e","a","preventDefault","tweet","content","userName","date","Date","toISOString","fetch","method","headers","body","JSON","stringify","onSubmitTweet","alert","onSubmit","autoFocus","value","onChange","event","target","maxLength","placeholder","cols","rows","disabled","length","TweetItem","TweetsList","useEffect","tweets","map","index","NavBar","home","setHome","profile","setProfile","location","useLocation","pathname","toLowerCase","exact","to","Profile","setUserName","myInput","createRef","marginTop","color","htmlFor","backgroundColor","border","ref","type","onClick","upadteUsername","current","App","setUser","updated","setUpdated","setTweets","isLoading","setIsLoading","getTweets","response","json","data","tweetText","isUpdated","newUserName","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d91d1c1b.chunk.js","sourcesContent":["export const apiConst = {\r\n    apiUrl: 'http://micro-blogging-dot-full-stack-course-services.ew.r.appspot.com/tweet'\r\n}","export default function Loader() {\r\n  const style = {\r\n    display: \"flex\",\r\n    zIndex: \"100\",\r\n    height: \"100vh\",\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    background: \"gray\",\r\n    opacity: \"0.5\",\r\n    position: \"fixed\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n  };\r\n\r\n  return (\r\n    <div style={style}>\r\n      <div style={{ zIndex: \"200\" }} className=\"spinner-border\" role=\"status\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { apiConst } from \"../../api.const\";\r\nimport \"../tweetForm/TweetForm.css\";\r\n\r\nfunction NewTweetForm(props) {\r\n  const [usersTweet, setTweet] = useState(\"\");\r\n  const [tweetsArr, setArr] = useState([]);\r\n\r\n  const handleTweet = (value) => {\r\n    setTweet(value);\r\n  };\r\n\r\n  const handleArr = async (e) => {\r\n    e.preventDefault();\r\n    const tweet = {\r\n      content: usersTweet,\r\n      userName: props.userName,\r\n      date: new Date().toISOString(),\r\n    };\r\n    try {\r\n      const response = await fetch(apiConst.apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(tweet),\r\n      });\r\n      props.onSubmitTweet(true);\r\n      //   throw new Error(\"messege blabla\");\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <div className=\"parentDiv\">\r\n        <form onSubmit={(e) => handleArr(e)}>\r\n          <textarea\r\n            autoFocus={true}\r\n            value={usersTweet}\r\n            onChange={(event) => handleTweet(event.target.value)}\r\n            maxLength=\"140\"\r\n            placeholder=\"What you have in mind...\"\r\n            cols=\"90\"\r\n            rows=\"6.5\"></textarea>\r\n          <button\r\n            className=\"tweetBtn\"\r\n            disabled={usersTweet.length === 140 || usersTweet.length === 0}>\r\n            Tweet\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewTweetForm;\r\n","import React from \"react\";\r\nimport \"../tweetItem/TweetItem.css\";\r\n\r\nconst TweetItem = (props) => {\r\n  return (\r\n    <div className=\"tweetItem\">\r\n      <div className=\"topOfItem\">\r\n        <div>{props.tweet.userName}</div>\r\n        <div>tweeted at: {props.tweet.date}</div>\r\n      </div>\r\n      <div>{props.tweet.content}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetItem;\r\n","import { useEffect } from \"react\";\r\nimport TweetItem from \"./tweetItem/TweetItem\";\r\nimport \"../App.css\";\r\n\r\nconst TweetsList = (props) => {\r\n  useEffect(() => {}, [props.tweets]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {props.tweets.map((tweet, index) => {\r\n        return <TweetItem tweet={tweet} key={index} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default TweetsList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  NavLink,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\n\r\nexport default function NavBar() {\r\n  const [home, setHome] = useState(false);\r\n  const [profile, setProfile] = useState(false);\r\n\r\n  let location = useLocation();\r\n  useEffect(() => {\r\n    if (location.pathname.toLowerCase() === \"/\") {\r\n      setHome(true);\r\n      setProfile(false);\r\n    } else if (location.pathname.toLowerCase() === \"/profile\") {\r\n      setHome(false);\r\n      setProfile(true);\r\n    }\r\n  }, [location]);\r\n\r\n  return (\r\n    <div className=\"nav-container\">\r\n      <NavLink\r\n        className={home ? \"nav-link-active\" : \"nav-link\"}\r\n        exact={true}\r\n        to=\"/\">\r\n        Home\r\n      </NavLink>\r\n      <NavLink\r\n        className={profile ? \"nav-link-active\" : \"nav-link\"}\r\n        exact={true}\r\n        to=\"/profile\">\r\n        Profile\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, createRef } from \"react\";\r\n\r\nexport default function Profile(props) {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const myInput = createRef(null);\r\n\r\n  const onInput = (value) => {\r\n    setUserName(value);\r\n  };\r\n\r\n  const onSave = () => {\r\n    props.upadteUsername(userName);\r\n    myInput.current.value = \"\";\r\n    setUserName(\"\");\r\n    alert(\"user name has changed\");\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: \"2rem\", width: \"600px\", color: \"white\" }}>\r\n      <h2 style={{ width: \"100%\" }}>Profile</h2>\r\n      <label htmlFor=\"myInput\">User Name</label>\r\n      <input\r\n        style={{\r\n          color: \"white\",\r\n          backgroundColor: \"transparent\",\r\n          border: \"1px solid white\",\r\n        }}\r\n        className=\"form-control\"\r\n        ref={myInput}\r\n        autoFocus={true}\r\n        type=\"text\"\r\n        onChange={(event) => onInput(event.target.value)}\r\n      />\r\n      <div\r\n        style={{\r\n          marginTop: \"10px\",\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          justifyContent: \"flex-end\",\r\n        }}>\r\n        <button className=\"btn btn-primary\" onClick={() => onSave()}>\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { apiConst } from './api.const';\r\nimport './App.css';\r\nimport Loader from './components/Loader';\r\nimport NewTweetForm from './components/tweetForm/NewTweetForm';\r\nimport TweetsList from './components/TweetsList';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport NavBar from './components/NavBar';\r\nimport Profile from './components/Profile';\r\n\r\n\r\nfunction App() {\r\n  const [ userName, setUser ] = useState(\"Elad\");\r\n  const [ updated, setUpdated ] = useState(0);\r\n  const [ tweets, setTweets ] = useState([]);\r\n  const [ isLoading, setIsLoading ] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // const revArr = JSON.parse(localStorage.getItem(\"name\"));\r\n    // setTweets(revArr.reverse())\r\n    getTweets();\r\n  }, [ updated ]);\r\n\r\n  const getTweets = async () => {\r\n    setIsLoading(true);\r\n    const response = await fetch(apiConst.apiUrl);\r\n    const data = await response.json();\r\n    setTweets(data.tweets)\r\n    setIsLoading(false);\r\n  }\r\n\r\n  function onSubmitTweet(tweetText) {\r\n    let isUpdated = updated;\r\n    isUpdated++;\r\n    setUpdated(isUpdated);\r\n  }\r\n  function upadteUsername(newUserName) {\r\n    setUser(newUserName);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Router>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route exact path=\"/\" render={() => <><NewTweetForm userName={userName} onSubmitTweet={onSubmitTweet} /><TweetsList tweets={tweets} /></>} />\r\n          <Route path=\"/profile\" render={() => <Profile upadteUsername={upadteUsername} />} />\r\n        </Switch>\r\n      </Router>\r\n      {\r\n        isLoading ? <Loader /> : <></>\r\n      }\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n{/* <NewTweetForm onSubmitTweet={onSubmitTweet} />\r\n<TweetsList tweets={tweets} />\r\n//{\r\n  isLoading ? <Loader /> : <></> */}\r\n//}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}